// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/01/2019 22:38:52"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Chen_Kevin_16x4SRAM
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Chen_Kevin_16x4SRAM_vlg_sample_tst(
	Chen_Kevin_address,
	Chen_Kevin_CS,
	Chen_Kevin_datain,
	Chen_Kevin_OE,
	Chen_Kevin_WE,
	sampler_tx
);
input [3:0] Chen_Kevin_address;
input  Chen_Kevin_CS;
input [3:0] Chen_Kevin_datain;
input  Chen_Kevin_OE;
input  Chen_Kevin_WE;
output sampler_tx;

reg sample;
time current_time;
always @(Chen_Kevin_address or Chen_Kevin_CS or Chen_Kevin_datain or Chen_Kevin_OE or Chen_Kevin_WE)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Chen_Kevin_16x4SRAM_vlg_check_tst (
	Chen_Kevin_out,
	sampler_rx
);
input [3:0] Chen_Kevin_out;
input sampler_rx;

reg [3:0] Chen_Kevin_out_expected;

reg [3:0] Chen_Kevin_out_prev;

reg [3:0] Chen_Kevin_out_expected_prev;

reg [3:0] last_Chen_Kevin_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	Chen_Kevin_out_prev = Chen_Kevin_out;
end

// update expected /o prevs

always @(trigger)
begin
	Chen_Kevin_out_expected_prev = Chen_Kevin_out_expected;
end


// expected Chen_Kevin_out[ 3 ]
initial
begin
	Chen_Kevin_out_expected[3] = 1'bX;
end 
// expected Chen_Kevin_out[ 2 ]
initial
begin
	Chen_Kevin_out_expected[2] = 1'bX;
end 
// expected Chen_Kevin_out[ 1 ]
initial
begin
	Chen_Kevin_out_expected[1] = 1'bX;
end 
// expected Chen_Kevin_out[ 0 ]
initial
begin
	Chen_Kevin_out_expected[0] = 1'bX;
end 
// generate trigger
always @(Chen_Kevin_out_expected or Chen_Kevin_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Chen_Kevin_out = %b | ",Chen_Kevin_out_expected_prev);
	$display("| real Chen_Kevin_out = %b | ",Chen_Kevin_out_prev);
`endif
	if (
		( Chen_Kevin_out_expected_prev[0] !== 1'bx ) && ( Chen_Kevin_out_prev[0] !== Chen_Kevin_out_expected_prev[0] )
		&& ((Chen_Kevin_out_expected_prev[0] !== last_Chen_Kevin_out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Chen_Kevin_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Chen_Kevin_out_expected_prev);
		$display ("     Real value = %b", Chen_Kevin_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Chen_Kevin_out_exp[0] = Chen_Kevin_out_expected_prev[0];
	end
	if (
		( Chen_Kevin_out_expected_prev[1] !== 1'bx ) && ( Chen_Kevin_out_prev[1] !== Chen_Kevin_out_expected_prev[1] )
		&& ((Chen_Kevin_out_expected_prev[1] !== last_Chen_Kevin_out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Chen_Kevin_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Chen_Kevin_out_expected_prev);
		$display ("     Real value = %b", Chen_Kevin_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Chen_Kevin_out_exp[1] = Chen_Kevin_out_expected_prev[1];
	end
	if (
		( Chen_Kevin_out_expected_prev[2] !== 1'bx ) && ( Chen_Kevin_out_prev[2] !== Chen_Kevin_out_expected_prev[2] )
		&& ((Chen_Kevin_out_expected_prev[2] !== last_Chen_Kevin_out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Chen_Kevin_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Chen_Kevin_out_expected_prev);
		$display ("     Real value = %b", Chen_Kevin_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Chen_Kevin_out_exp[2] = Chen_Kevin_out_expected_prev[2];
	end
	if (
		( Chen_Kevin_out_expected_prev[3] !== 1'bx ) && ( Chen_Kevin_out_prev[3] !== Chen_Kevin_out_expected_prev[3] )
		&& ((Chen_Kevin_out_expected_prev[3] !== last_Chen_Kevin_out_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Chen_Kevin_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Chen_Kevin_out_expected_prev);
		$display ("     Real value = %b", Chen_Kevin_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Chen_Kevin_out_exp[3] = Chen_Kevin_out_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#320000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Chen_Kevin_16x4SRAM_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] Chen_Kevin_address;
reg Chen_Kevin_CS;
reg [3:0] Chen_Kevin_datain;
reg Chen_Kevin_OE;
reg Chen_Kevin_WE;
// wires                                               
wire [3:0] Chen_Kevin_out;

wire sampler;                             

// assign statements (if any)                          
Chen_Kevin_16x4SRAM i1 (
// port map - connection between master ports and signals/registers   
	.Chen_Kevin_address(Chen_Kevin_address),
	.Chen_Kevin_CS(Chen_Kevin_CS),
	.Chen_Kevin_datain(Chen_Kevin_datain),
	.Chen_Kevin_OE(Chen_Kevin_OE),
	.Chen_Kevin_out(Chen_Kevin_out),
	.Chen_Kevin_WE(Chen_Kevin_WE)
);
// Chen_Kevin_datain[ 3 ]
always
begin
	Chen_Kevin_datain[3] = 1'b0;
	Chen_Kevin_datain[3] = #80000 1'b1;
	#80000;
end 
// Chen_Kevin_datain[ 2 ]
always
begin
	Chen_Kevin_datain[2] = 1'b0;
	Chen_Kevin_datain[2] = #40000 1'b1;
	#40000;
end 
// Chen_Kevin_datain[ 1 ]
always
begin
	Chen_Kevin_datain[1] = 1'b0;
	Chen_Kevin_datain[1] = #20000 1'b1;
	#20000;
end 
// Chen_Kevin_datain[ 0 ]
always
begin
	Chen_Kevin_datain[0] = 1'b0;
	Chen_Kevin_datain[0] = #10000 1'b1;
	#10000;
end 
// Chen_Kevin_address[ 3 ]
always
begin
	Chen_Kevin_address[3] = 1'b0;
	Chen_Kevin_address[3] = #160000 1'b1;
	#160000;
end 
// Chen_Kevin_address[ 2 ]
always
begin
	Chen_Kevin_address[2] = 1'b0;
	Chen_Kevin_address[2] = #80000 1'b1;
	#80000;
end 
// Chen_Kevin_address[ 1 ]
always
begin
	Chen_Kevin_address[1] = 1'b0;
	Chen_Kevin_address[1] = #40000 1'b1;
	#40000;
end 
// Chen_Kevin_address[ 0 ]
always
begin
	Chen_Kevin_address[0] = 1'b0;
	Chen_Kevin_address[0] = #20000 1'b1;
	#20000;
end 

// Chen_Kevin_OE
always
begin
	Chen_Kevin_OE = 1'b0;
	Chen_Kevin_OE = #40000 1'b1;
	#40000;
end 

// Chen_Kevin_CS
always
begin
	Chen_Kevin_CS = 1'b0;
	Chen_Kevin_CS = #80000 1'b1;
	#80000;
end 

// Chen_Kevin_WE
always
begin
	Chen_Kevin_WE = 1'b0;
	Chen_Kevin_WE = #160000 1'b1;
	#160000;
end 

Chen_Kevin_16x4SRAM_vlg_sample_tst tb_sample (
	.Chen_Kevin_address(Chen_Kevin_address),
	.Chen_Kevin_CS(Chen_Kevin_CS),
	.Chen_Kevin_datain(Chen_Kevin_datain),
	.Chen_Kevin_OE(Chen_Kevin_OE),
	.Chen_Kevin_WE(Chen_Kevin_WE),
	.sampler_tx(sampler)
);

Chen_Kevin_16x4SRAM_vlg_check_tst tb_out(
	.Chen_Kevin_out(Chen_Kevin_out),
	.sampler_rx(sampler)
);
endmodule

